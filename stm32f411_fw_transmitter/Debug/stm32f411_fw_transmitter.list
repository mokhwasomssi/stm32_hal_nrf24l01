
stm32f411_fw_transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002644  08002644  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800264c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002658  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002658  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aba  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174b  00000000  00000000  00027af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00029248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  00029a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e15  00000000  00000000  0002a160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000081cd  00000000  00000000  0003ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008152b  00000000  00000000  00047142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c866d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e8c  00000000  00000000  000c86c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002614 	.word	0x08002614

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002614 	.word	0x08002614

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_GPIO_Init+0xa4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a21      	ldr	r2, [pc, #132]	; (8000574 <MX_GPIO_Init+0xa4>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_GPIO_Init+0xa4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_GPIO_Init+0xa4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <MX_GPIO_Init+0xa4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_GPIO_Init+0xa4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	603b      	str	r3, [r7, #0]
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_GPIO_Init+0xa4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <MX_GPIO_Init+0xa4>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_GPIO_Init+0xa4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2108      	movs	r1, #8
 800053e:	480e      	ldr	r0, [pc, #56]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000540:	f000 fcb4 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2110      	movs	r1, #16
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <MX_GPIO_Init+0xa8>)
 800054a:	f000 fcaf 	bl	8000eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800054e:	2318      	movs	r3, #24
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_GPIO_Init+0xa8>)
 8000566:	f000 fb1d 	bl	8000ba4 <HAL_GPIO_Init>

}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800
 8000578:	40020000 	.word	0x40020000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 f994 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f818 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f7ff ffa2 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058c:	f000 f882 	bl	8000694 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  nrf24l01p_tx_init(2500, _1Mbps);
 8000590:	2100      	movs	r1, #0
 8000592:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000596:	f001 fedf 	bl	8002358 <nrf24l01p_tx_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  nrf24l01p_tx_transmit();
 800059a:	f001 fefb 	bl	8002394 <nrf24l01p_tx_transmit>
	  HAL_Delay(100);
 800059e:	2064      	movs	r0, #100	; 0x64
 80005a0:	f000 f9f6 	bl	8000990 <HAL_Delay>
	  status_register = nrf24l01p_get_status();
 80005a4:	f001 ff50 	bl	8002448 <nrf24l01p_get_status>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <main+0x38>)
 80005ae:	701a      	strb	r2, [r3, #0]
	  nrf24l01p_tx_transmit();
 80005b0:	e7f3      	b.n	800059a <main+0x1e>
 80005b2:	bf00      	nop
 80005b4:	2000002b 	.word	0x2000002b

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f81c 	bl	8002604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000628:	230c      	movs	r3, #12
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800062c:	2360      	movs	r3, #96	; 0x60
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fc4f 	bl	8000ee0 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f81e 	bl	8000688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f000 feb1 	bl	80013d0 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f808 	bl	8000688 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	e7fe      	b.n	8000690 <Error_Handler+0x8>
	...

08000694 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2218      	movs	r2, #24
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f001 f80f 	bl	8001708 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f7ff ffca 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40013000 	.word	0x40013000

08000700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <HAL_SPI_MspInit+0x84>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d12b      	bne.n	800077a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b18      	ldr	r3, [pc, #96]	; (8000788 <HAL_SPI_MspInit+0x88>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <HAL_SPI_MspInit+0x88>)
 800072c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <HAL_SPI_MspInit+0x88>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_SPI_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <HAL_SPI_MspInit+0x88>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_SPI_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800075a:	23e0      	movs	r3, #224	; 0xe0
 800075c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800076a:	2305      	movs	r3, #5
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_SPI_MspInit+0x8c>)
 8000776:	f000 fa15 	bl	8000ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40013000 	.word	0x40013000
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 f890 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000882:	f7ff ffd7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fe99 	bl	80025bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088a:	f7ff fe77 	bl	800057c <main>
  bx  lr    
 800088e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	20000088 	.word	0x20000088

080008a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <HAL_Init+0x40>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <HAL_Init+0x40>)
 80008b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_Init+0x40>)
 80008c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_Init+0x40>)
 80008ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 f931 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f808 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e0:	f7ff ff56 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023c00 	.word	0x40023c00

080008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_InitTick+0x54>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x58>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 f93b 	bl	8000b8a <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e00e      	b.n	800093c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b0f      	cmp	r3, #15
 8000922:	d80a      	bhi.n	800093a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000924:	2200      	movs	r2, #0
 8000926:	6879      	ldr	r1, [r7, #4]
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f000 f911 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000930:	4a06      	ldr	r2, [pc, #24]	; (800094c <HAL_InitTick+0x5c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	e000      	b.n	800093c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093a:	2301      	movs	r3, #1
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000000 	.word	0x20000000
 8000948:	20000008 	.word	0x20000008
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_IncTick+0x20>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x24>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4413      	add	r3, r2
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_IncTick+0x24>)
 8000962:	6013      	str	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000008 	.word	0x20000008
 8000974:	20000084 	.word	0x20000084

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000084 	.word	0x20000084

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_Delay+0x44>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffde 	bl	8000978 <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	db0a      	blt.n	8000a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2da      	uxtb	r2, r3
 8000a54:	490c      	ldr	r1, [pc, #48]	; (8000a88 <__NVIC_SetPriority+0x4c>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	0112      	lsls	r2, r2, #4
 8000a5c:	b2d2      	uxtb	r2, r2
 8000a5e:	440b      	add	r3, r1
 8000a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a64:	e00a      	b.n	8000a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <__NVIC_SetPriority+0x50>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	f003 030f 	and.w	r3, r3, #15
 8000a72:	3b04      	subs	r3, #4
 8000a74:	0112      	lsls	r2, r2, #4
 8000a76:	b2d2      	uxtb	r2, r2
 8000a78:	440b      	add	r3, r1
 8000a7a:	761a      	strb	r2, [r3, #24]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f1c3 0307 	rsb	r3, r3, #7
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	bf28      	it	cs
 8000aae:	2304      	movcs	r3, #4
 8000ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	2b06      	cmp	r3, #6
 8000ab8:	d902      	bls.n	8000ac0 <NVIC_EncodePriority+0x30>
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3b03      	subs	r3, #3
 8000abe:	e000      	b.n	8000ac2 <NVIC_EncodePriority+0x32>
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43d9      	mvns	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae8:	4313      	orrs	r3, r2
         );
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3724      	adds	r7, #36	; 0x24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff8e 	bl	8000a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff47 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff5c 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff8e 	bl	8000a90 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5d 	bl	8000a3c <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffb0 	bl	8000af8 <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e159      	b.n	8000e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 8148 	bne.w	8000e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d005      	beq.n	8000bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d130      	bne.n	8000c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	091b      	lsrs	r3, r3, #4
 8000c42:	f003 0201 	and.w	r2, r3, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d017      	beq.n	8000c94 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d123      	bne.n	8000ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	69b9      	ldr	r1, [r7, #24]
 8000ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0203 	and.w	r2, r3, #3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a2 	beq.w	8000e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a56      	ldr	r2, [pc, #344]	; (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b54      	ldr	r3, [pc, #336]	; (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d46:	4a52      	ldr	r2, [pc, #328]	; (8000e90 <HAL_GPIO_Init+0x2ec>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a49      	ldr	r2, [pc, #292]	; (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x202>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x1fe>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a47      	ldr	r2, [pc, #284]	; (8000e9c <HAL_GPIO_Init+0x2f8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x1fa>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a46      	ldr	r2, [pc, #280]	; (8000ea0 <HAL_GPIO_Init+0x2fc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x1f6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x1f2>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e008      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da6:	2300      	movs	r3, #0
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	f002 0203 	and.w	r2, r2, #3
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4093      	lsls	r3, r2
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db8:	4935      	ldr	r1, [pc, #212]	; (8000e90 <HAL_GPIO_Init+0x2ec>)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc6:	4b38      	ldr	r3, [pc, #224]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000df0:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e14:	4a24      	ldr	r2, [pc, #144]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_GPIO_Init+0x304>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b0f      	cmp	r3, #15
 8000e78:	f67f aea2 	bls.w	8000bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3724      	adds	r7, #36	; 0x24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40020c00 	.word	0x40020c00
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40013c00 	.word	0x40013c00

08000eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ebc:	787b      	ldrb	r3, [r7, #1]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ec2:	887a      	ldrh	r2, [r7, #2]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec8:	e003      	b.n	8000ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	041a      	lsls	r2, r3, #16
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	619a      	str	r2, [r3, #24]
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e264      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d075      	beq.n	8000fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000efe:	4ba3      	ldr	r3, [pc, #652]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d00c      	beq.n	8000f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0a:	4ba0      	ldr	r3, [pc, #640]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d112      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f16:	4b9d      	ldr	r3, [pc, #628]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f22:	d10b      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	4b99      	ldr	r3, [pc, #612]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05b      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x108>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d157      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e23f      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d106      	bne.n	8000f54 <HAL_RCC_OscConfig+0x74>
 8000f46:	4b91      	ldr	r3, [pc, #580]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a90      	ldr	r2, [pc, #576]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e01d      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x98>
 8000f5e:	4b8b      	ldr	r3, [pc, #556]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a8a      	ldr	r2, [pc, #552]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b88      	ldr	r3, [pc, #544]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a87      	ldr	r2, [pc, #540]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f78:	4b84      	ldr	r3, [pc, #528]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a83      	ldr	r2, [pc, #524]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b81      	ldr	r3, [pc, #516]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a80      	ldr	r2, [pc, #512]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fcee 	bl	8000978 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcea 	bl	8000978 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e204      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xc0>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcda 	bl	8000978 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fcd6 	bl	8000978 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1f0      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	4b6c      	ldr	r3, [pc, #432]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xe8>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d063      	beq.n	80010be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff6:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100a:	2b08      	cmp	r3, #8
 800100c:	d11c      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100e:	4b5f      	ldr	r3, [pc, #380]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	4b5c      	ldr	r3, [pc, #368]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1c4      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b56      	ldr	r3, [pc, #344]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4952      	ldr	r1, [pc, #328]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	e03a      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_RCC_OscConfig+0x2b0>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fc8f 	bl	8000978 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fc8b 	bl	8000978 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1a5      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4940      	ldr	r1, [pc, #256]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e015      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <HAL_RCC_OscConfig+0x2b0>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fc6e 	bl	8000978 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fc6a 	bl	8000978 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e184      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d030      	beq.n	800112c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d016      	beq.n	8001100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_RCC_OscConfig+0x2b4>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fc4e 	bl	8000978 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fc4a 	bl	8000978 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e164      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x200>
 80010fe:	e015      	b.n	800112c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_RCC_OscConfig+0x2b4>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fc37 	bl	8000978 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fc33 	bl	8000978 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e14d      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a0 	beq.w	800127a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x2b8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001172:	2b00      	cmp	r3, #0
 8001174:	d121      	bne.n	80011ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_RCC_OscConfig+0x2b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_RCC_OscConfig+0x2b8>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001182:	f7ff fbf9 	bl	8000978 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001188:	e011      	b.n	80011ae <HAL_RCC_OscConfig+0x2ce>
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	42470000 	.word	0x42470000
 8001194:	42470e80 	.word	0x42470e80
 8001198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119c:	f7ff fbec 	bl	8000978 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e106      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x4e4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f0      	beq.n	800119c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d106      	bne.n	80011d0 <HAL_RCC_OscConfig+0x2f0>
 80011c2:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c6:	4a80      	ldr	r2, [pc, #512]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6713      	str	r3, [r2, #112]	; 0x70
 80011ce:	e01c      	b.n	800120a <HAL_RCC_OscConfig+0x32a>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	2b05      	cmp	r3, #5
 80011d6:	d10c      	bne.n	80011f2 <HAL_RCC_OscConfig+0x312>
 80011d8:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011dc:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6713      	str	r3, [r2, #112]	; 0x70
 80011e4:	4b78      	ldr	r3, [pc, #480]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6713      	str	r3, [r2, #112]	; 0x70
 80011f0:	e00b      	b.n	800120a <HAL_RCC_OscConfig+0x32a>
 80011f2:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f6:	4a74      	ldr	r2, [pc, #464]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80011f8:	f023 0301 	bic.w	r3, r3, #1
 80011fc:	6713      	str	r3, [r2, #112]	; 0x70
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001204:	f023 0304 	bic.w	r3, r3, #4
 8001208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d015      	beq.n	800123e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fbb1 	bl	8000978 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fbad 	bl	8000978 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e0c5      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001230:	4b65      	ldr	r3, [pc, #404]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ee      	beq.n	800121a <HAL_RCC_OscConfig+0x33a>
 800123c:	e014      	b.n	8001268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff fb9b 	bl	8000978 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fb97 	bl	8000978 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0af      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1ee      	bne.n	8001246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d105      	bne.n	800127a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126e:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a55      	ldr	r2, [pc, #340]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 809b 	beq.w	80013ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b08      	cmp	r3, #8
 800128e:	d05c      	beq.n	800134a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d141      	bne.n	800131c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x4ec>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb6b 	bl	8000978 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fb67 	bl	8000978 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e081      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b8:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	019b      	lsls	r3, r3, #6
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	085b      	lsrs	r3, r3, #1
 80012dc:	3b01      	subs	r3, #1
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	431a      	orrs	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	061b      	lsls	r3, r3, #24
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ee:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x4ec>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb40 	bl	8000978 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fb3c 	bl	8000978 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e056      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0x41c>
 800131a:	e04e      	b.n	80013ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x4ec>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff fb29 	bl	8000978 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff fb25 	bl	8000978 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e03f      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x44a>
 8001348:	e037      	b.n	80013ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e032      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001356:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_RCC_OscConfig+0x4e8>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d028      	beq.n	80013b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d121      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d11a      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001386:	4013      	ands	r3, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800138c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138e:	4293      	cmp	r3, r2
 8001390:	d111      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	085b      	lsrs	r3, r3, #1
 800139e:	3b01      	subs	r3, #1
 80013a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d107      	bne.n	80013b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d001      	beq.n	80013ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40007000 	.word	0x40007000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	42470060 	.word	0x42470060

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cc      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d90c      	bls.n	800140c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d044      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	2b03      	cmp	r3, #3
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e067      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fa5a 	bl	8000978 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff fa56 	bl	8000978 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e04f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d20c      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f9ba 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00
 800158c:	40023800 	.word	0x40023800
 8001590:	0800262c 	.word	0x0800262c
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a2:	2100      	movs	r1, #0
 80015a4:	6079      	str	r1, [r7, #4]
 80015a6:	2100      	movs	r1, #0
 80015a8:	60f9      	str	r1, [r7, #12]
 80015aa:	2100      	movs	r1, #0
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015ae:	2100      	movs	r1, #0
 80015b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b2:	4952      	ldr	r1, [pc, #328]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80015b4:	6889      	ldr	r1, [r1, #8]
 80015b6:	f001 010c 	and.w	r1, r1, #12
 80015ba:	2908      	cmp	r1, #8
 80015bc:	d00d      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x3e>
 80015be:	2908      	cmp	r1, #8
 80015c0:	f200 8094 	bhi.w	80016ec <HAL_RCC_GetSysClockFreq+0x150>
 80015c4:	2900      	cmp	r1, #0
 80015c6:	d002      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x32>
 80015c8:	2904      	cmp	r1, #4
 80015ca:	d003      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x38>
 80015cc:	e08e      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ce:	4b4c      	ldr	r3, [pc, #304]	; (8001700 <HAL_RCC_GetSysClockFreq+0x164>)
 80015d0:	60bb      	str	r3, [r7, #8]
       break;
 80015d2:	e08e      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_RCC_GetSysClockFreq+0x168>)
 80015d6:	60bb      	str	r3, [r7, #8]
      break;
 80015d8:	e08b      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015da:	4948      	ldr	r1, [pc, #288]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80015dc:	6849      	ldr	r1, [r1, #4]
 80015de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80015e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e4:	4945      	ldr	r1, [pc, #276]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80015e6:	6849      	ldr	r1, [r1, #4]
 80015e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80015ec:	2900      	cmp	r1, #0
 80015ee:	d024      	beq.n	800163a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f0:	4942      	ldr	r1, [pc, #264]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80015f2:	6849      	ldr	r1, [r1, #4]
 80015f4:	0989      	lsrs	r1, r1, #6
 80015f6:	4608      	mov	r0, r1
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001600:	f04f 0500 	mov.w	r5, #0
 8001604:	ea00 0204 	and.w	r2, r0, r4
 8001608:	ea01 0305 	and.w	r3, r1, r5
 800160c:	493d      	ldr	r1, [pc, #244]	; (8001704 <HAL_RCC_GetSysClockFreq+0x168>)
 800160e:	fb01 f003 	mul.w	r0, r1, r3
 8001612:	2100      	movs	r1, #0
 8001614:	fb01 f102 	mul.w	r1, r1, r2
 8001618:	1844      	adds	r4, r0, r1
 800161a:	493a      	ldr	r1, [pc, #232]	; (8001704 <HAL_RCC_GetSysClockFreq+0x168>)
 800161c:	fba2 0101 	umull	r0, r1, r2, r1
 8001620:	1863      	adds	r3, r4, r1
 8001622:	4619      	mov	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	461a      	mov	r2, r3
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	f7fe fdd4 	bl	80001d8 <__aeabi_uldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4613      	mov	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e04a      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	099b      	lsrs	r3, r3, #6
 8001640:	461a      	mov	r2, r3
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	ea02 0400 	and.w	r4, r2, r0
 8001652:	ea03 0501 	and.w	r5, r3, r1
 8001656:	4620      	mov	r0, r4
 8001658:	4629      	mov	r1, r5
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	014b      	lsls	r3, r1, #5
 8001664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001668:	0142      	lsls	r2, r0, #5
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	1b00      	subs	r0, r0, r4
 8001670:	eb61 0105 	sbc.w	r1, r1, r5
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	018b      	lsls	r3, r1, #6
 800167e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001682:	0182      	lsls	r2, r0, #6
 8001684:	1a12      	subs	r2, r2, r0
 8001686:	eb63 0301 	sbc.w	r3, r3, r1
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	00d9      	lsls	r1, r3, #3
 8001694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001698:	00d0      	lsls	r0, r2, #3
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	1912      	adds	r2, r2, r4
 80016a0:	eb45 0303 	adc.w	r3, r5, r3
 80016a4:	f04f 0000 	mov.w	r0, #0
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	0299      	lsls	r1, r3, #10
 80016ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016b2:	0290      	lsls	r0, r2, #10
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f7fe fd88 	bl	80001d8 <__aeabi_uldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4613      	mov	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_RCC_GetSysClockFreq+0x160>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	3301      	adds	r3, #1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	60bb      	str	r3, [r7, #8]
      break;
 80016ea:	e002      	b.n	80016f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <HAL_RCC_GetSysClockFreq+0x164>)
 80016ee:	60bb      	str	r3, [r7, #8]
      break;
 80016f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016f2:	68bb      	ldr	r3, [r7, #8]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdb0      	pop	{r4, r5, r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400
 8001704:	017d7840 	.word	0x017d7840

08001708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;/**
 8001716:	2301      	movs	r3, #1
 8001718:	e07b      	b.n	8001812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2b00      	cmp	r3, #0
 8001720:	d108      	bne.n	8001734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800172a:	d009      	beq.n	8001740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	e005      	b.n	8001740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe ffd0 	bl	8000700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c4:	ea42 0103 	orr.w	r1, r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	f003 0104 	and.w	r1, r3, #4
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	f003 0210 	and.w	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b088      	sub	sp, #32
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4613      	mov	r3, r2
 8001828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_SPI_Transmit+0x22>
 8001838:	2302      	movs	r3, #2
 800183a:	e126      	b.n	8001a8a <HAL_SPI_Transmit+0x270>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001844:	f7ff f898 	bl	8000978 <HAL_GetTick>
 8001848:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d002      	beq.n	8001860 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800185a:	2302      	movs	r3, #2
 800185c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800185e:	e10b      	b.n	8001a78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_SPI_Transmit+0x52>
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001870:	e102      	b.n	8001a78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018b8:	d10f      	bne.n	80018da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b40      	cmp	r3, #64	; 0x40
 80018e6:	d007      	beq.n	80018f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001900:	d14b      	bne.n	800199a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_SPI_Transmit+0xf6>
 800190a:	8afb      	ldrh	r3, [r7, #22]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d13e      	bne.n	800198e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	881a      	ldrh	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	1c9a      	adds	r2, r3, #2
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800192a:	b29b      	uxth	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001934:	e02b      	b.n	800198e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b02      	cmp	r3, #2
 8001942:	d112      	bne.n	800196a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	1c9a      	adds	r2, r3, #2
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	86da      	strh	r2, [r3, #54]	; 0x36
 8001968:	e011      	b.n	800198e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800196a:	f7ff f805 	bl	8000978 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d803      	bhi.n	8001982 <HAL_SPI_Transmit+0x168>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d102      	bne.n	8001988 <HAL_SPI_Transmit+0x16e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800198c:	e074      	b.n	8001a78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1ce      	bne.n	8001936 <HAL_SPI_Transmit+0x11c>
 8001998:	e04c      	b.n	8001a34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_SPI_Transmit+0x18e>
 80019a2:	8afb      	ldrh	r3, [r7, #22]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d140      	bne.n	8001a2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	330c      	adds	r3, #12
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80019ce:	e02c      	b.n	8001a2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d113      	bne.n	8001a06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	330c      	adds	r3, #12
 80019e8:	7812      	ldrb	r2, [r2, #0]
 80019ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a04:	e011      	b.n	8001a2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a06:	f7fe ffb7 	bl	8000978 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d803      	bhi.n	8001a1e <HAL_SPI_Transmit+0x204>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d102      	bne.n	8001a24 <HAL_SPI_Transmit+0x20a>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a28:	e026      	b.n	8001a78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1cd      	bne.n	80019d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fbcb 	bl	80021d4 <SPI_EndRxTxTransaction>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2220      	movs	r2, #32
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10a      	bne.n	8001a68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	77fb      	strb	r3, [r7, #31]
 8001a74:	e000      	b.n	8001a78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001a76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b088      	sub	sp, #32
 8001a96:	af02      	add	r7, sp, #8
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001aae:	d112      	bne.n	8001ad6 <HAL_SPI_Receive+0x44>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10e      	bne.n	8001ad6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2204      	movs	r2, #4
 8001abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f8f1 	bl	8001cb4 <HAL_SPI_TransmitReceive>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	e0ea      	b.n	8001cac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_SPI_Receive+0x52>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0e3      	b.n	8001cac <HAL_SPI_Receive+0x21a>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aec:	f7fe ff44 	bl	8000978 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d002      	beq.n	8001b04 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b02:	e0ca      	b.n	8001c9a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_SPI_Receive+0x7e>
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b14:	e0c1      	b.n	8001c9a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	88fa      	ldrh	r2, [r7, #6]
 8001b2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b5c:	d10f      	bne.n	8001b7e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b88:	2b40      	cmp	r3, #64	; 0x40
 8001b8a:	d007      	beq.n	8001b9c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d162      	bne.n	8001c6a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ba4:	e02e      	b.n	8001c04 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d115      	bne.n	8001be0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f103 020c 	add.w	r2, r3, #12
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001bde:	e011      	b.n	8001c04 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be0:	f7fe feca 	bl	8000978 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d803      	bhi.n	8001bf8 <HAL_SPI_Receive+0x166>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d102      	bne.n	8001bfe <HAL_SPI_Receive+0x16c>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c02:	e04a      	b.n	8001c9a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1cb      	bne.n	8001ba6 <HAL_SPI_Receive+0x114>
 8001c0e:	e031      	b.n	8001c74 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d113      	bne.n	8001c46 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c44:	e011      	b.n	8001c6a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c46:	f7fe fe97 	bl	8000978 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d803      	bhi.n	8001c5e <HAL_SPI_Receive+0x1cc>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d102      	bne.n	8001c64 <HAL_SPI_Receive+0x1d2>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c68:	e017      	b.n	8001c9a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1cd      	bne.n	8001c10 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	6839      	ldr	r1, [r7, #0]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 fa45 	bl	8002108 <SPI_EndRxTransaction>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
 8001c96:	e000      	b.n	8001c9a <HAL_SPI_Receive+0x208>
  }

error :
 8001c98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_SPI_TransmitReceive+0x26>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e18a      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x33c>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ce2:	f7fe fe49 	bl	8000978 <HAL_GetTick>
 8001ce6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d00f      	beq.n	8001d24 <HAL_SPI_TransmitReceive+0x70>
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d0a:	d107      	bne.n	8001d1c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d103      	bne.n	8001d1c <HAL_SPI_TransmitReceive+0x68>
 8001d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d003      	beq.n	8001d24 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d22:	e15b      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_SPI_TransmitReceive+0x82>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_SPI_TransmitReceive+0x82>
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d3c:	e14e      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d003      	beq.n	8001d52 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	887a      	ldrh	r2, [r7, #2]
 8001d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d007      	beq.n	8001da6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dae:	d178      	bne.n	8001ea2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <HAL_SPI_TransmitReceive+0x10a>
 8001db8:	8b7b      	ldrh	r3, [r7, #26]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d166      	bne.n	8001e8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	1c9a      	adds	r2, r3, #2
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001de2:	e053      	b.n	8001e8c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d11b      	bne.n	8001e2a <HAL_SPI_TransmitReceive+0x176>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d016      	beq.n	8001e2a <HAL_SPI_TransmitReceive+0x176>
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d113      	bne.n	8001e2a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	1c9a      	adds	r2, r3, #2
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d119      	bne.n	8001e6c <HAL_SPI_TransmitReceive+0x1b8>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e54:	1c9a      	adds	r2, r3, #2
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001e6c:	f7fe fd84 	bl	8000978 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d807      	bhi.n	8001e8c <HAL_SPI_TransmitReceive+0x1d8>
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e82:	d003      	beq.n	8001e8c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e8a:	e0a7      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1a6      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x130>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1a1      	bne.n	8001de4 <HAL_SPI_TransmitReceive+0x130>
 8001ea0:	e07c      	b.n	8001f9c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_SPI_TransmitReceive+0x1fc>
 8001eaa:	8b7b      	ldrh	r3, [r7, #26]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d16b      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed6:	e057      	b.n	8001f88 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d11c      	bne.n	8001f20 <HAL_SPI_TransmitReceive+0x26c>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d017      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0x26c>
 8001ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d114      	bne.n	8001f20 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	330c      	adds	r3, #12
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d119      	bne.n	8001f62 <HAL_SPI_TransmitReceive+0x2ae>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d014      	beq.n	8001f62 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f62:	f7fe fd09 	bl	8000978 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d803      	bhi.n	8001f7a <HAL_SPI_TransmitReceive+0x2c6>
 8001f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d102      	bne.n	8001f80 <HAL_SPI_TransmitReceive+0x2cc>
 8001f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f86:	e029      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1a2      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x224>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d19d      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f917 	bl	80021d4 <SPI_EndRxTxTransaction>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001fb8:	e010      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10b      	bne.n	8001fda <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	e000      	b.n	8001fdc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001fda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3730      	adds	r7, #48	; 0x30
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002008:	f7fe fcb6 	bl	8000978 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002018:	f7fe fcae 	bl	8000978 <HAL_GetTick>
 800201c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	0d1b      	lsrs	r3, r3, #20
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	fb02 f303 	mul.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800202e:	e054      	b.n	80020da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002036:	d050      	beq.n	80020da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002038:	f7fe fc9e 	bl	8000978 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	429a      	cmp	r2, r3
 8002046:	d902      	bls.n	800204e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d13d      	bne.n	80020ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800205c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002066:	d111      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002070:	d004      	beq.n	800207c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800207a:	d107      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800208a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002094:	d10f      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e017      	b.n	80020fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d19b      	bne.n	8002030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000000 	.word	0x20000000

08002108 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211c:	d111      	bne.n	8002142 <SPI_EndRxTransaction+0x3a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002126:	d004      	beq.n	8002132 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002130:	d107      	bne.n	8002142 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800214a:	d12a      	bne.n	80021a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002154:	d012      	beq.n	800217c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2200      	movs	r2, #0
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff ff49 	bl	8001ff8 <SPI_WaitFlagStateUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02d      	beq.n	80021c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e026      	b.n	80021ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	2101      	movs	r1, #1
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ff36 	bl	8001ff8 <SPI_WaitFlagStateUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01a      	beq.n	80021c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e013      	b.n	80021ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	2101      	movs	r1, #1
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff ff23 	bl	8001ff8 <SPI_WaitFlagStateUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e000      	b.n	80021ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <SPI_EndRxTxTransaction+0x7c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <SPI_EndRxTxTransaction+0x80>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	0d5b      	lsrs	r3, r3, #21
 80021ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021fe:	d112      	bne.n	8002226 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff fef4 	bl	8001ff8 <SPI_WaitFlagStateUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d016      	beq.n	8002244 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f043 0220 	orr.w	r2, r3, #32
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e00f      	b.n	8002246 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3b01      	subs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d0f2      	beq.n	8002226 <SPI_EndRxTxTransaction+0x52>
 8002240:	e000      	b.n	8002244 <SPI_EndRxTxTransaction+0x70>
        break;
 8002242:	bf00      	nop
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000
 8002254:	165e9f81 	.word	0x165e9f81

08002258 <cs_high>:
static uint8_t tx_payload[2]; // 1-32 bytes.
static uint8_t ack_payload[2];


static void cs_high()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800225c:	2201      	movs	r2, #1
 800225e:	2110      	movs	r1, #16
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <cs_high+0x14>)
 8002262:	f7fe fe23 	bl	8000eac <HAL_GPIO_WritePin>
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40020000 	.word	0x40020000

08002270 <cs_low>:

static void cs_low()
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	2110      	movs	r1, #16
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <cs_low+0x14>)
 800227a:	f7fe fe17 	bl	8000eac <HAL_GPIO_WritePin>
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40020000 	.word	0x40020000

08002288 <ce_high>:

static void ce_high()
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	2108      	movs	r1, #8
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <ce_high+0x14>)
 8002292:	f7fe fe0b 	bl	8000eac <HAL_GPIO_WritePin>
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40020000 	.word	0x40020000

080022a0 <ce_low>:

static void ce_low()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2108      	movs	r1, #8
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <ce_low+0x14>)
 80022aa:	f7fe fdff 	bl	8000eac <HAL_GPIO_WritePin>
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40020000 	.word	0x40020000

080022b8 <nrf24l01p_reset>:


void nrf24l01p_reset()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80022bc:	f7ff ffcc 	bl	8002258 <cs_high>
    ce_low();
 80022c0:	f7ff ffee 	bl	80022a0 <ce_low>

    // Reset registers
    nrf24l01p_write_register(NRF24L01P_REG_CONFIG, 0x08);
 80022c4:	2108      	movs	r1, #8
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 f890 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80022cc:	213f      	movs	r1, #63	; 0x3f
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 f88c 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80022d4:	2103      	movs	r1, #3
 80022d6:	2002      	movs	r0, #2
 80022d8:	f000 f888 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80022dc:	2103      	movs	r1, #3
 80022de:	2003      	movs	r0, #3
 80022e0:	f000 f884 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80022e4:	2103      	movs	r1, #3
 80022e6:	2004      	movs	r0, #4
 80022e8:	f000 f880 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RF_CH, 0x02);
 80022ec:	2102      	movs	r1, #2
 80022ee:	2005      	movs	r0, #5
 80022f0:	f000 f87c 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80022f4:	2107      	movs	r1, #7
 80022f6:	2006      	movs	r0, #6
 80022f8:	f000 f878 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_STATUS, 0x0E);
 80022fc:	210e      	movs	r1, #14
 80022fe:	2007      	movs	r0, #7
 8002300:	f000 f874 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 8002304:	2100      	movs	r1, #0
 8002306:	2011      	movs	r0, #17
 8002308:	f000 f870 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 800230c:	2100      	movs	r1, #0
 800230e:	2011      	movs	r0, #17
 8002310:	f000 f86c 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 8002314:	2100      	movs	r1, #0
 8002316:	2012      	movs	r0, #18
 8002318:	f000 f868 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800231c:	2100      	movs	r1, #0
 800231e:	2013      	movs	r0, #19
 8002320:	f000 f864 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8002324:	2100      	movs	r1, #0
 8002326:	2014      	movs	r0, #20
 8002328:	f000 f860 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800232c:	2100      	movs	r1, #0
 800232e:	2015      	movs	r0, #21
 8002330:	f000 f85c 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8002334:	2100      	movs	r1, #0
 8002336:	2016      	movs	r0, #22
 8002338:	f000 f858 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800233c:	2111      	movs	r1, #17
 800233e:	2017      	movs	r0, #23
 8002340:	f000 f854 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_DYNPD, 0x00);
 8002344:	2100      	movs	r1, #0
 8002346:	201c      	movs	r0, #28
 8002348:	f000 f850 	bl	80023ec <nrf24l01p_write_register>
    nrf24l01p_write_register(NRF24L01P_REG_FEATURE, 0x00);
 800234c:	2100      	movs	r1, #0
 800234e:	201d      	movs	r0, #29
 8002350:	f000 f84c 	bl	80023ec <nrf24l01p_write_register>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <nrf24l01p_tx_init>:
    while(!nrf24l01p_is_rx_data_ready());
    nrf24l01p_rx_read_payload();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	80fb      	strh	r3, [r7, #6]
 8002364:	4613      	mov	r3, r2
 8002366:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8002368:	f7ff ffa6 	bl	80022b8 <nrf24l01p_reset>

    nrf24l01p_ptx_mode();
 800236c:	f000 f886 	bl	800247c <nrf24l01p_ptx_mode>
    nrf24l01p_power_up();
 8002370:	f000 f899 	bl	80024a6 <nrf24l01p_power_up>

    nrf24l01p_flush_tx();
 8002374:	f000 f8e8 	bl	8002548 <nrf24l01p_flush_tx>

    nrf24l01p_set_rf_channel(MHz);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f8a8 	bl	80024d0 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 8002380:	797b      	ldrb	r3, [r7, #5]
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f8b7 	bl	80024f6 <nrf24l01p_set_rf_air_data_rate>
    
    ce_high();
 8002388:	f7ff ff7e 	bl	8002288 <ce_high>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit()
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
    nrf24l01p_tx_write_payload();
 8002398:	f000 f8ee 	bl	8002578 <nrf24l01p_tx_write_payload>
    //while(!nrf24l01p_is_tx_data_sent());
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <nrf24l01p_read_register>:

uint8_t nrf24l01p_read_register(uint8_t reg)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_data;

    cs_low();
 80023ae:	f7ff ff5f 	bl	8002270 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80023b2:	f107 020e 	add.w	r2, r7, #14
 80023b6:	f107 010f 	add.w	r1, r7, #15
 80023ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	2301      	movs	r3, #1
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <nrf24l01p_read_register+0x48>)
 80023c4:	f7ff fc76 	bl	8001cb4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_data, 1, 2000);
 80023c8:	f107 010d 	add.w	r1, r7, #13
 80023cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023d0:	2201      	movs	r2, #1
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <nrf24l01p_read_register+0x48>)
 80023d4:	f7ff fb5d 	bl	8001a92 <HAL_SPI_Receive>
    cs_high();
 80023d8:	f7ff ff3e 	bl	8002258 <cs_high>

    return read_data;
 80023dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	2000002c 	.word	0x2000002c

080023ec <nrf24l01p_write_register>:

uint8_t nrf24l01p_write_register(uint8_t reg, uint8_t value)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	b2db      	uxtb	r3, r3
 8002404:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_data = value;
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	737b      	strb	r3, [r7, #13]

    cs_low();
 800240a:	f7ff ff31 	bl	8002270 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800240e:	f107 020e 	add.w	r2, r7, #14
 8002412:	f107 010f 	add.w	r1, r7, #15
 8002416:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2301      	movs	r3, #1
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <nrf24l01p_write_register+0x58>)
 8002420:	f7ff fc48 	bl	8001cb4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_data, 1, 2000);
 8002424:	f107 010d 	add.w	r1, r7, #13
 8002428:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800242c:	2201      	movs	r2, #1
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <nrf24l01p_write_register+0x58>)
 8002430:	f7ff f9f3 	bl	800181a <HAL_SPI_Transmit>
    cs_high();
 8002434:	f7ff ff10 	bl	8002258 <cs_high>

    return write_data;
 8002438:	7b7b      	ldrb	r3, [r7, #13]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000002c 	.word	0x2000002c

08002448 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_NOP;
 800244e:	23ff      	movs	r3, #255	; 0xff
 8002450:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002452:	f7ff ff0d 	bl	8002270 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002456:	1dba      	adds	r2, r7, #6
 8002458:	1df9      	adds	r1, r7, #7
 800245a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	4805      	ldr	r0, [pc, #20]	; (8002478 <nrf24l01p_get_status+0x30>)
 8002464:	f7ff fc26 	bl	8001cb4 <HAL_SPI_TransmitReceive>
    cs_high(); 
 8002468:	f7ff fef6 	bl	8002258 <cs_high>

    return status;
 800246c:	79bb      	ldrb	r3, [r7, #6]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000002c 	.word	0x2000002c

0800247c <nrf24l01p_ptx_mode>:

    nrf24l01p_write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_ptx_mode()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
    uint8_t new_config = nrf24l01p_read_register(NRF24L01P_REG_CONFIG);
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff ff8c 	bl	80023a0 <nrf24l01p_read_register>
 8002488:	4603      	mov	r3, r0
 800248a:	71fb      	strb	r3, [r7, #7]
    new_config &= 0xFE;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	71fb      	strb	r3, [r7, #7]

    nrf24l01p_write_register(NRF24L01P_REG_CONFIG, new_config);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4619      	mov	r1, r3
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff ffa7 	bl	80023ec <nrf24l01p_write_register>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <nrf24l01p_power_up>:
{
    nrf24l01p_power_down();
}

void nrf24l01p_power_up()
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
    uint8_t new_config = nrf24l01p_read_register(NRF24L01P_REG_CONFIG);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff ff77 	bl	80023a0 <nrf24l01p_read_register>
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	71fb      	strb	r3, [r7, #7]

    nrf24l01p_write_register(NRF24L01P_REG_CONFIG, new_config);
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	4619      	mov	r1, r3
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7ff ff92 	bl	80023ec <nrf24l01p_write_register>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <nrf24l01p_set_rf_channel>:
    new_setup_retr |= ((us / 250) - 1) << 4;
    nrf24l01p_write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
}

void nrf24l01p_set_rf_channel(channel MHz)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 80024e0:	81fb      	strh	r3, [r7, #14]
    nrf24l01p_write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 80024e2:	89fb      	ldrh	r3, [r7, #14]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	2005      	movs	r0, #5
 80024ea:	f7ff ff7f 	bl	80023ec <nrf24l01p_write_register>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <nrf24l01p_set_rf_air_data_rate>:

    nrf24l01p_write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
}

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = nrf24l01p_read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8002500:	2006      	movs	r0, #6
 8002502:	f7ff ff4d 	bl	80023a0 <nrf24l01p_read_register>
 8002506:	4603      	mov	r3, r0
 8002508:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800250c:	73fb      	strb	r3, [r7, #15]
    
    switch(bps)
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d00a      	beq.n	800252a <nrf24l01p_set_rf_air_data_rate+0x34>
 8002514:	2b02      	cmp	r3, #2
 8002516:	dc0e      	bgt.n	8002536 <nrf24l01p_set_rf_air_data_rate+0x40>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10a      	bne.n	8002536 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps: 
            break;
        case _2Mbps: 
            new_rf_setup |= 1 << 3;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	73fb      	strb	r3, [r7, #15]
            break;
 8002528:	e005      	b.n	8002536 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	f043 0320 	orr.w	r3, r3, #32
 8002530:	73fb      	strb	r3, [r7, #15]
            break;
 8002532:	e000      	b.n	8002536 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 8002534:	bf00      	nop
    }
    nrf24l01p_write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	4619      	mov	r1, r3
 800253a:	2006      	movs	r0, #6
 800253c:	f7ff ff56 	bl	80023ec <nrf24l01p_write_register>
}
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <nrf24l01p_flush_tx>:
{
    // nothing?
}

void nrf24l01p_flush_tx()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 800254e:	23e1      	movs	r3, #225	; 0xe1
 8002550:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002552:	f7ff fe8d 	bl	8002270 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002556:	1dba      	adds	r2, r7, #6
 8002558:	1df9      	adds	r1, r7, #7
 800255a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	4804      	ldr	r0, [pc, #16]	; (8002574 <nrf24l01p_flush_tx+0x2c>)
 8002564:	f7ff fba6 	bl	8001cb4 <HAL_SPI_TransmitReceive>
    cs_high();
 8002568:	f7ff fe76 	bl	8002258 <cs_high>
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	2000002c 	.word	0x2000002c

08002578 <nrf24l01p_tx_write_payload>:
    HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, 2, 2000);
    cs_high();
}

void nrf24l01p_tx_write_payload()
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 800257e:	23a0      	movs	r3, #160	; 0xa0
 8002580:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 8002582:	f7ff fe75 	bl	8002270 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8002586:	1dba      	adds	r2, r7, #6
 8002588:	1df9      	adds	r1, r7, #7
 800258a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2301      	movs	r3, #1
 8002592:	4808      	ldr	r0, [pc, #32]	; (80025b4 <nrf24l01p_tx_write_payload+0x3c>)
 8002594:	f7ff fb8e 	bl	8001cb4 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, 2, 2000);
 8002598:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800259c:	2202      	movs	r2, #2
 800259e:	4906      	ldr	r1, [pc, #24]	; (80025b8 <nrf24l01p_tx_write_payload+0x40>)
 80025a0:	4804      	ldr	r0, [pc, #16]	; (80025b4 <nrf24l01p_tx_write_payload+0x3c>)
 80025a2:	f7ff f93a 	bl	800181a <HAL_SPI_Transmit>
    cs_high(); 
 80025a6:	f7ff fe57 	bl	8002258 <cs_high>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	2000002c 	.word	0x2000002c
 80025b8:	20000028 	.word	0x20000028

080025bc <__libc_init_array>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4d0d      	ldr	r5, [pc, #52]	; (80025f4 <__libc_init_array+0x38>)
 80025c0:	4c0d      	ldr	r4, [pc, #52]	; (80025f8 <__libc_init_array+0x3c>)
 80025c2:	1b64      	subs	r4, r4, r5
 80025c4:	10a4      	asrs	r4, r4, #2
 80025c6:	2600      	movs	r6, #0
 80025c8:	42a6      	cmp	r6, r4
 80025ca:	d109      	bne.n	80025e0 <__libc_init_array+0x24>
 80025cc:	4d0b      	ldr	r5, [pc, #44]	; (80025fc <__libc_init_array+0x40>)
 80025ce:	4c0c      	ldr	r4, [pc, #48]	; (8002600 <__libc_init_array+0x44>)
 80025d0:	f000 f820 	bl	8002614 <_init>
 80025d4:	1b64      	subs	r4, r4, r5
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2600      	movs	r6, #0
 80025da:	42a6      	cmp	r6, r4
 80025dc:	d105      	bne.n	80025ea <__libc_init_array+0x2e>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e4:	4798      	blx	r3
 80025e6:	3601      	adds	r6, #1
 80025e8:	e7ee      	b.n	80025c8 <__libc_init_array+0xc>
 80025ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ee:	4798      	blx	r3
 80025f0:	3601      	adds	r6, #1
 80025f2:	e7f2      	b.n	80025da <__libc_init_array+0x1e>
 80025f4:	08002644 	.word	0x08002644
 80025f8:	08002644 	.word	0x08002644
 80025fc:	08002644 	.word	0x08002644
 8002600:	08002648 	.word	0x08002648

08002604 <memset>:
 8002604:	4402      	add	r2, r0
 8002606:	4603      	mov	r3, r0
 8002608:	4293      	cmp	r3, r2
 800260a:	d100      	bne.n	800260e <memset+0xa>
 800260c:	4770      	bx	lr
 800260e:	f803 1b01 	strb.w	r1, [r3], #1
 8002612:	e7f9      	b.n	8002608 <memset+0x4>

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr
